import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.TreeSet;
import java.util.List;

/**
 * CWE: http://cwe.mitre.org/top25/#CWE-89
 * Checks to see if the current file asks for user input and uses that input to access a database
 *
 */
public class JavaSQLInjectionVulnerability implements Vulnerability {

	@Override
	public List<Integer> run(Analyzer ana) {
		JavaAnalyzer jana=(JavaAnalyzer)ana;
		HashMap<String, ArrayList<Integer>> lowerSTL = jana.getSymbolToLine();
		HashMap<String, ArrayList<Integer>> upperSTL = new HashMap<>();
		for(String key : lowerSTL.keySet()){ //effectively change each String key of the JavaAnalyzer's symbolToLine HashMap to uppercase
			upperSTL.put(key.toUpperCase(), lowerSTL.get(key));
		}
		String DBkeywords[] = {"SELECT", "UNION", "WHERE", "FROM", "HAVING", "JOIN", "ORDER BY"}; //a list of key words used in SQL
		String keyInMethods[] = {".NEXT", ".READ", ".GET"}; //a list of methods used to obtain input from the user, list can be extended later
		String contents = "";
		TreeSet<Integer> locations = new TreeSet<>();

		contents=jana.getRawContents();
		//checks the two java library api imports see if being used
		//if no then skips all analysis to return false no vulnerabilities
		if (contents.contains("java.sql") || contents.contains("jdbc")) {
			contents = contents.toUpperCase();

			for (String word : DBkeywords) {//iterates through the key word list to see if they
				//appear in the string of the program code.

				//if said keyword appears, checks for specific
				// statements that hackers use for SQL Injection.
				// %00 is a null byte used by attackers in many different
				// types of vulnerabilities.
				if (contents.contains(word)) {

					//if keywords were found, check to see if the program collects user input
					for (String inputWord : keyInMethods) {

						//If it does collect user input, check to see if it uses prepared statements
						//prepared statements are safe. If no prepared statement, not safe.
						if (contents.contains(inputWord) && !contents.contains("PREPAREDSTATEMENT")) {
							for(String key : upperSTL.keySet()){
								if(key.contains(inputWord)){
									locations.addAll(upperSTL.get(key));
								}
							}
						}
					}
				}
			}
		}

		return new ArrayList<Integer>(locations);
	}

}
