/**
 * Java OS Injection Vulnerability class
 *
 * @author Kristelle Lucero
 * @author Ed Klein
 */
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

/**
 * CWE: http://cwe.mitre.org/top25/#CWE-78
 * looks to see if a java file contains possible risk of OS injection 
 *
 */
public class JavaOSInjectionVulnerability implements Vulnerability {

	/*
	* This method analyzes the code for the possibility of Operating System Injection
	*/
	public List<Integer> run(Analyzer ana){
		JavaAnalyzer javaAn = (JavaAnalyzer) ana;

		String osCommands[] = {"java.lang","java.io","getruntime","processbuilder"}; 
		//^^^^these are packages that are most likely to call OS commands, or commonly exploited OS commands
		
		//String osBlackList[] = {"|",":",";","$","<",">","`","\\","/","!","{","}","(",")","[","]","&","*","+","=","?","-","#","~",".","\"","%"}; 
		//^^^these are unsafe characters. Check to see if program uses a blacklist

		String contents = "";
		ArrayList<Integer> vulnLines = new ArrayList<>(); //a list of line numbers that the vulnerability was found on
		
		//gather the contents of the file from the java analyzer
		contents = javaAn.getFileContents();
		//switch to lowercase to make comparisons easier
		contents = contents.toLowerCase();
		//check for key words that might indicate an operating system call
		for (String key : osCommands) {
			
			//if the file contains those keywords and it doesn't use a regex for a whitelist
			if (contents.contains(key) && !contents.contains("regex")) {
				//add the line number 
				for(Map.Entry<String, ArrayList<Integer>> e: javaAn.getSymbolToLine().entrySet()) {
					if(e.getKey().toLowerCase().contains(key)) {
						
						vulnLines.addAll(e.getValue());
					}
				}
			}
		}

		return vulnLines;
	}
}






