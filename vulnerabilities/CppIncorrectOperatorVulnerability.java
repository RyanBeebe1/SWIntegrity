import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;


/**
 * CWE: https://cwe.mitre.org/data/definitions/480.html
 * @author Eric Stephens
 * Checks the current file to see if it contains an incorrect operator.
 * Test Cases:
 * 		a variable is checked for equivalence "==" outside of an if or while loop's boolean check aka while(in here){}
 * 		a variable is assigned a value inside an if or a while loop's boolean check
 */
public class CppIncorrectOperatorVulnerability implements Vulnerability {
	
	@Override
	public List<Integer> run(Analyzer ana) {
		
		ArrayList<Integer> list = new ArrayList<>();
		
		CppAnalyzer cppana=(CppAnalyzer)ana;
		String[] split = cppana.getFileContents().split(" ");
		List<CppAnalyzer.Variable> vars = cppana.getVariables();
		List<CppAnalyzer.Pointer> pointers = cppana.getPointersList();
		ArrayList<String> pointersNames = new ArrayList<>();
		ArrayList<String> names = new ArrayList<>();
		Iterator<CppAnalyzer.Variable> itty = vars.iterator();
		Iterator<CppAnalyzer.Pointer> itty2 = pointers.iterator();
		HashMap<Integer, String> numToLine = cppana.getNumToLine();	
		
		while (itty.hasNext()){
			names.add(itty.next().name);
		}
		
		while(itty2.hasNext()) {
			pointersNames.add(itty2.next().name);
		}
		
		/*Iterator <String> namesItty = names.iterator();
		Iterator<String> pointersItty = pointersNames.iterator();
		
		for (Map.Entry<Integer, String> line : numToLine.entrySet()) {
			String value = line.getValue();
			System.out.println(value);
			while (namesItty.hasNext()) {
				String name = namesItty.next().trim();
				System.out.println(name);
				if (value.contains(name)) {
					System.out.println("HERE");
					if (((line.getValue().contains("if") || line.getValue().contains("while") )&& line.getValue().contains(name + "=")) || (line.getValue().contains(name + "==") && !line.getValue().contains("if") && !line.getValue().contains("while"))) {
						list.add(line.getKey());
					}
				}
			}
			
			while(pointersItty.hasNext()) {
				String name = pointersItty.next();
				
				if (value.contains(name)) {
					if ((line.getValue().contains("if") || line.getValue().contains("while") && line.getValue().contains(name + "=")) || (line.getValue().contains(name + "==") && !line.getValue().contains("if") && !line.getValue().contains("while"))) {
						list.add(line.getKey());
					}
				}
			}
		}*/
		
		for (int i = 0; i < split.length; i++) {
			if (names.contains(split[i])){
	
				if(split[i+1].equals("=") && split[i + 2].equals("=") && (split[i - 1].equals(";") || split[i - 1].equals("}") || split[i - 2].equals(";") || split[i - 2].equals("}"))) {
					list.add(cppana.getSymbolToLine().get(i));

				}
				else if(split[i + 1].equals("=") && !split[i+2].equals("=")&& (!split[i - 1].equals(";") && !split[i - 2].equals(";") && !split[i - 1].equals("}") && !split[i - 2].equals("}")&& !split[i - 1].equals("{") && !split[i - 2].equals("{")&& !split[i - 1].equals(")") && !split[i - 2].equals(")"))) {
					list.add(cppana.getSymbolToLine().get(i));
	
				}	
			}
			else {
			if (pointersNames.contains(split[i])) {
				if(split[i+1].equals("=") && split[i + 2].equals("=") && (split[i - 2].equals(";") || split[i - 2].equals("}") || split[i - 3].equals(";") || split[i - 3].equals("}"))) {
					list.add(cppana.getSymbolToLine().get(i));
					
				}
				else if(split[i + 1].equals("=") && (!split[i - 2].equals(";") && !split[i - 3].equals(";") && !split[i - 2].equals("}") && !split[i - 3].equals("}")&& !split[i - 2].equals("{") && !split[i - 3].equals("{")&& !split[i - 2].equals(")") && !split[i - 3].equals(")"))) {
					list.add(cppana.getSymbolToLine().get(i));
				}
			}
			}
		} 	
		
		return list;
	}

}
