import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;

/**
 * CWE: http://cwe.mitre.org/top25/#CWE-89
 * Checks to see if the current file asks for user input and uses that input to access a database
 *
 */
public class CppSQLInjectionVulnerability implements Vulnerability {

	@Override
	public List<Integer> run(Analyzer ana) {
		CppAnalyzer cppana=(CppAnalyzer)ana;
		
		String DBkeywords[] = {"SELECT", "UNION", "WHERE", "FROM", "HAVING", "JOIN", "ORDER BY"}; //A List of key words used in SQL
		//a list of the most common c++ libraries to use for databases
		String DBlibraries[] = {"MYSQL","SQL","SQLAPI", "SQLITE3","SOCI", "OTL", "LMDB++", "DTL", "LMDB", "MONGOXX"};
		HashSet<Integer> lineNumbers=new HashSet<>();
		
		
			
			//change everything to uppercase to deal with case sensitivity
			String contents = cppana.getFileContents().toUpperCase();
			String[] temp=contents.split(" ");
			//check to see if a database library was used for c++,
			//if you find one, there is a possibility for SQL injection
			//if you don't, then there's a strong indicator that there won't be any SQL injections
			for(String lib : DBlibraries) {	
				if(contents.contains(lib)){
					for(String word : DBkeywords){//iterates through the key word list to see if they
								      //appear in the string of the program code.
						
						//search for keywords that might indicate an SQL statement	
						for(int index=0;index<temp.length;index++){
							//if keywords were found, check to see if the program calls for user input
							if(temp[index].contains(word)){
								lineNumbers.add(cppana.getSymbolToLine().get(index));
							}
								
							
						} 													     
					}
				} 
			}
		
		
		List<Integer> lines=new LinkedList<>();
		for(Integer number:lineNumbers) {
			lines.add(number);
		}
		return lines;
	}

}
