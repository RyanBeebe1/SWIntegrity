import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

/**
 * 
 * Contains vulnerability for C++ Dangling pointer 
 *
 */
public class CppDanglingPointerVulnerability implements Vulnerability {

	public List<Integer> run(Analyzer ana) {
		//convert analyzer to appropriate Type
		CppAnalyzer cppana=(CppAnalyzer)ana;
		//split file contents on space for traversal
		String[] words = cppana.getFileContents().split(" ");
		//start list for collection of dangling pointers
		List<Integer> danglingPointerList = new LinkedList<>();
		//for each pointer found in the file search its deletions
		for(CppAnalyzer.Pointer p: cppana.getPointersList())
		{
			//search deletion
			for(Integer deletion: p.getDeletions())
			{
				//begin to look after deletion
				int i = deletion+1;
				//set confirmed dangling pointer variable
				boolean isDP = false;
				//keep looking while we are still in the bounds
				while(i<words.length)
				{
					//if we reach the end of the scope we know we have a dangling pointer so we break out
					if (words[i].equals("}"))
					{
						isDP = true;
						break;
					}
					//if = then the dangling pointer has been reassigned properly
					if(words[i].equals(p.getName())&&words[i+1].equals("=")&&!words[i+2].equals("=")) {
						break;
					}
					//if the dangling pointer is referenced again then it is has never been reassigned appropriately
					else if (words[i].equals(p.getName())) {
						isDP=true;
						break;
					}
					i++;
				}
				if(isDP)
				{
					//we check to see if the pointer was a dangling pointer if true then we get the 
					//line at which the pointer was deleted and get that deletions line with symbol to line
					danglingPointerList.add(cppana.getSymbolToLine().get(deletion));
				}
			}
			//check assignments for assignment to the result of a function
			for(Map.Entry<Integer, String> entry:p.getAssignments().entrySet()) 
			{
				if(!entry.getValue().equals("")) {
					String[] assignment=entry.getValue().split(" ");
					String first=assignment[0];
					String last=assignment[assignment.length-1];
					if(first.equals("new")||first.equals("&"));
					else if(last.equals(")")) {
						danglingPointerList.add(cppana.getSymbolToLine().get(entry.getKey()));
					}
						
				}
				
			}
			
		}
		return danglingPointerList;
	}
}
